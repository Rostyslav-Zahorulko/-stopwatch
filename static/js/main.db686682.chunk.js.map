{"version":3,"sources":["components/Stopwatch3/Stopwatch3.js","App.js","index.js"],"names":["array","delta","timer$","Observable","observer","setInterval","next","Clock","useState","isStarted","setIsStarted","subscription","setSubscription","time","setTime","handleStart","useCallback","console","log","unsubscribe","timerSubscription","subscribe","value","prevState","handleWait","push","Date","now","length","shift","handleReset","pad","String","padStart","hours","Math","floor","minutes","seconds","className","type","onClick","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAKIA,EAAQ,GACRC,EAAQ,IAENC,EAAS,IAAIC,KAAW,SAACC,GAC7BC,aAAY,WACVD,EAASE,KAAK,OACb,QAGU,SAASC,IACtB,MAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAwCF,mBAAS,MAAjD,mBAAOG,EAAP,KAAqBC,EAArB,KACA,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAcC,uBAAY,WAC9B,GAAKP,EAWHQ,QAAQC,IAAI,oBAEZP,EAAaQ,cAEbT,GAAcD,GACdK,EAAQ,OAhBM,CACdG,QAAQC,IAAI,mBAEZR,GAAcD,GAEd,IAAMW,EAAoBlB,EAAOmB,WAAU,SAACC,GAC1CR,GAAQ,SAACS,GAAD,OAAeA,EAAYD,QAGrCV,EAAgBQ,MASjB,CAACX,EAAWE,IAETa,EAAaR,uBAAY,WAC7BhB,EAAMyB,KAAKC,KAAKC,OAEK,IAAjB3B,EAAM4B,SACR5B,EAAM6B,QACN5B,EAAQD,EAAM,GAAKA,EAAM,IAGvBC,GAAS,MACXgB,QAAQC,IAAI,uBAEZP,EAAaQ,cAEbT,GAAa,GAEbV,EAAQ,GACRC,EAAQ,OAET,CAACU,IAEEmB,EAAcd,uBAAY,WAC9BC,QAAQC,IAAI,sBAEZJ,EAAQ,KACP,IAEGiB,EAAM,SAACT,GACX,OAAOU,OAAOV,GAAOW,SAAS,EAAG,MAG7BC,EAAQH,EACZI,KAAKC,MAAOvB,EAAI,MAAL,OAEPwB,EAAUN,EAAII,KAAKC,MAAOvB,EAAI,KAAL,MACzByB,EAAUP,EAAII,KAAKC,MAAOvB,EAAI,IAAkB,MAEtD,OACE,qCACE,sBAAK0B,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UACE,sBAAMA,UAAU,QAAhB,SAAyBL,IACzB,sBAAMK,UAAU,QAAhB,sBAGF,sBAAKA,UAAU,QAAf,UACE,sBAAMA,UAAU,QAAhB,SAAyBF,IACzB,sBAAME,UAAU,QAAhB,wBAGF,sBAAKA,UAAU,QAAf,UACE,sBAAMA,UAAU,QAAhB,SAAyBD,IACzB,sBAAMC,UAAU,QAAhB,2BAIJ,qBAAIA,UAAU,cAAd,UACE,oBAAIA,UAAU,mBAAd,SACE,wBAAQA,UAAU,SAASC,KAAK,SAASC,QAAS1B,EAAlD,4BAIF,oBAAIwB,UAAU,mBAAd,SACE,wBACEA,UAAU,SACVC,KAAK,SACLC,QAASjB,EACTkB,UAAWjC,EAJb,oBASF,oBAAI8B,UAAU,mBAAd,SACE,wBAAQA,UAAU,SAASC,KAAK,SAASC,QAASX,EAAlD,2BClGKa,MAVf,WACE,OACE,mCAGE,cAAC,EAAD,O,YCHNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.db686682.chunk.js","sourcesContent":["import { useState, useCallback } from \"react\";\r\nimport { Observable } from \"rxjs\";\r\n\r\nimport \"./Stopwatch3.css\";\r\n\r\nlet array = [];\r\nlet delta = 1000;\r\n\r\nconst timer$ = new Observable((observer) => {\r\n  setInterval(() => {\r\n    observer.next(1000);\r\n  }, 1000);\r\n});\r\n\r\nexport default function Clock() {\r\n  const [isStarted, setIsStarted] = useState(false);\r\n  const [subscription, setSubscription] = useState(null);\r\n  const [time, setTime] = useState(0);\r\n\r\n  const handleStart = useCallback(() => {\r\n    if (!isStarted) {\r\n      console.log(\"Countdown is ON\");\r\n\r\n      setIsStarted(!isStarted);\r\n\r\n      const timerSubscription = timer$.subscribe((value) => {\r\n        setTime((prevState) => prevState + value);\r\n      });\r\n\r\n      setSubscription(timerSubscription);\r\n    } else {\r\n      console.log(\"Countdown is OFF\");\r\n\r\n      subscription.unsubscribe();\r\n\r\n      setIsStarted(!isStarted);\r\n      setTime(0);\r\n    }\r\n  }, [isStarted, subscription]);\r\n\r\n  const handleWait = useCallback(() => {\r\n    array.push(Date.now());\r\n\r\n    if (array.length === 3) {\r\n      array.shift();\r\n      delta = array[1] - array[0];\r\n    }\r\n\r\n    if (delta <= 300) {\r\n      console.log(\"Countdown is PAUSED\");\r\n\r\n      subscription.unsubscribe();\r\n\r\n      setIsStarted(false);\r\n\r\n      array = [];\r\n      delta = 1000;\r\n    }\r\n  }, [subscription]);\r\n\r\n  const handleReset = useCallback(() => {\r\n    console.log(\"Countdown is RESET\");\r\n\r\n    setTime(0);\r\n  }, []);\r\n\r\n  const pad = (value) => {\r\n    return String(value).padStart(2, \"0\");\r\n  };\r\n\r\n  const hours = pad(\r\n    Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\r\n  );\r\n  const minutes = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const seconds = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"clockface\">\r\n        <div className=\"field\">\r\n          <span className=\"value\">{hours}</span>\r\n          <span className=\"label\">Hours</span>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <span className=\"value\">{minutes}</span>\r\n          <span className=\"label\">Minutes</span>\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <span className=\"value\">{seconds}</span>\r\n          <span className=\"label\">Seconds</span>\r\n        </div>\r\n      </div>\r\n\r\n      <ul className=\"button-list\">\r\n        <li className=\"button-list-item\">\r\n          <button className=\"button\" type=\"button\" onClick={handleStart}>\r\n            Start / Stop\r\n          </button>\r\n        </li>\r\n        <li className=\"button-list-item\">\r\n          <button\r\n            className=\"button\"\r\n            type=\"button\"\r\n            onClick={handleWait}\r\n            disabled={!isStarted}\r\n          >\r\n            Wait\r\n          </button>\r\n        </li>\r\n        <li className=\"button-list-item\">\r\n          <button className=\"button\" type=\"button\" onClick={handleReset}>\r\n            Reset\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","// import Stopwatch from \"./components/Stopwatch\";\n// import Stopwatch2 from \"./components/Stopwatch2\";\nimport Stopwatch3 from \"./components/Stopwatch3\";\n\nfunction App() {\n  return (\n    <>\n      {/* <Stopwatch /> */}\n      {/* <Stopwatch2 /> */}\n      <Stopwatch3 />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./styles/base.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}